version: '3'

vars:
  GOOS: "{{default OS .GOOS}}"
  MVNW: '{{if eq .GOOS "windows"}}mvnw.cmd{{else}}./mvnw{{end}}'
  DC_DIR: "deployment/docker-compose"
  INFRA_DC_FILE: "{{.DC_DIR}}/infra.yml"
  APPS_DC_FILE: "{{.DC_DIR}}/apps.yml"
  O11Y_DC_FILE: "{{.DC_DIR}}/o11y.yml"
  SLEEP_CMD: '{{if eq .GOOS "windows"}}timeout{{else}}sleep{{end}}'
  DOCKER_USERNAME: "chensoul"
  IMAGE_PREFIX: "bookstore"

tasks:
  default:
    cmds:
      - task: test
  test:
    deps: [format]
    cmds:
      - "{{.MVNW}} clean verify"

  format:
    cmds:
      - "{{.MVNW}} spotless:apply"

  build:
    cmds:
      - "{{.MVNW}} -pl catalog-service spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName={{.DOCKER_USERNAME}}/{{.IMAGE_PREFIX}}-catalog-service -Dspring-boot.build-image.builder=paketobuildpacks/builder-jammy-base"
      - "{{.MVNW}} -pl order-service spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName={{.DOCKER_USERNAME}}/{{.IMAGE_PREFIX}}-order-service -Dspring-boot.build-image.builder=paketobuildpacks/builder-jammy-base"
      - "{{.MVNW}} -pl notification-service spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName={{.DOCKER_USERNAME}}/{{.IMAGE_PREFIX}}-notification-service -Dspring-boot.build-image.builder=paketobuildpacks/builder-jammy-base"
      - "{{.MVNW}} -pl api-gateway spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName={{.DOCKER_USERNAME}}/{{.IMAGE_PREFIX}}-api-gateway -Dspring-boot.build-image.builder=paketobuildpacks/builder-jammy-base "
      - "{{.MVNW}} -pl webapp spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName={{.DOCKER_USERNAME}}/{{.IMAGE_PREFIX}}-webapp -Dspring-boot.build-image.builder=paketobuildpacks/builder-jammy-base"

  docker-build:
    cmds:
      - "{{.MVNW}} clean package -DskipTests"
      - "cd catalog-service && docker build -t  {{.DOCKER_USERNAME}}/{{.IMAGE_PREFIX}}-catalog-service ."
      - "cd order-service && docker build -t  {{.DOCKER_USERNAME}}/{{.IMAGE_PREFIX}}-order-service ."
      - "cd notification-service && docker build -t  {{.DOCKER_USERNAME}}/{{.IMAGE_PREFIX}}-notification-service ."
      - "cd api-gateway && docker build -t  {{.DOCKER_USERNAME}}/{{.IMAGE_PREFIX}}-api-gateway ."
      - "cd webapp && docker build -t  {{.DOCKER_USERNAME}}/{{.IMAGE_PREFIX}}-webapp ."

  start_infra:
    cmds:
      - "docker compose -f {{.INFRA_DC_FILE}} up -d"

  stop_infra:
    cmds:
      - "docker compose -f {{.INFRA_DC_FILE}} stop"

  restart_infra:
    cmds:
      - task: stop_infra
      - task: sleep
      - task: start_infra

  start_o11y:
    cmds:
      - "docker compose -f {{.O11Y_DC_FILE}} up -d"

  stop_o11y:
    cmds:
      - "docker compose -f {{.O11Y_DC_FILE}} stop"

  restart_o11y:
    cmds:
      - task: stop_o11y
      - task: sleep
      - task: start_o11y

  start:
    cmds:
      - "docker compose -f {{.INFRA_DC_FILE}} -f {{.APPS_DC_FILE}} up -d"

  stop:
    cmds:
      - "docker compose -f {{.INFRA_DC_FILE}} -f {{.APPS_DC_FILE}} stop"

  restart:
    cmds:
      - task: stop
      - task: sleep
      - task: start

  remove-container:
    cmds:
      - "docker compose -f {{.INFRA_DC_FILE}} -f {{.APPS_DC_FILE}} -f {{.O11Y_DC_FILE}} rm -f"

  sleep:
    vars:
      DURATION: "{{default 5 .DURATION}}"
    cmds:
      - "{{.SLEEP_CMD}} {{.DURATION}}"
